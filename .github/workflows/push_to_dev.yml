name: "create a pull request from feature to development"

on:
  pull_request:
    branches:
      - "feature/*"
  push:
    branches:
      - "feature/*"

#this action creates a pull request from the feature branch to the development branch
#but before that runs tests to check if there are no conflicts in the push files

jobs:
  #pushes code to the nex branch using a pull request
  developmentPromotion:
    name: create pull req
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: development
      - name: Reset promotion branch
        run: |
          git fetch origin feature/new_feature:feature/new_feature
          git reset --hard feature/new_feature
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v4
        with:
          branch: feature/new_feature #creates a temporary branch for the pull request
  #deploy to aws
  terraform:
    needs: developmentPromotion
    name: "Deploy-Development-Environment"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          # terraform_version: 0.13.0:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      

      - name: Terraform Init
        id: init
        run: |
          export TF_WORKSPACE="development"
          terraform init -input=false
          terraform workspace show
      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: |
          export TF_WORKSPACE="development"
          terraform plan -input=false -no-color
        continue-on-error: true

      - uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`${process.env.PLAN}\`\`\`
            </details>
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
              
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/development' && github.event_name == 'push'
        run: |
          export TF_WORKSPACE="development"
          terraform apply -auto-approve